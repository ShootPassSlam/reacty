{"version":3,"sources":["components/People/Person/Person.js","components/People/People.js","components/Topbar/Topbar.js","containers/App.js","serviceWorker.js","index.js","components/People/Person/Person.module.css"],"names":["React","memo","props","react_default","a","createElement","reactstrap_es","className","styles","Person","NewListItem","join","xs","sm","Title","Body","number","name","id","people","state","endpoint","_this2","this","socket","WebSocket","onopen","send","onmessage","e","message","JSON","parse","data","console","log","Object","toConsumableArray","location","array","value","length","low","high","mid","locationOf","splice","setState","close","nextProps","nextState","map","person","key","Component","topbar","buttonTitle","buttonColor","buttonState","title","color","onClick","clicked","App","showPeople","webSocketStreamToggle","doesShow","_this","People","Topbar","Boolean","window","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","change"],"mappings":"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","file":"static/js/main.451d9295.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col } from 'reactstrap';\n\nimport styles from './Person.module.css';\n\nconst person = (props) => {\n    return (\n            <Row className={[styles.Person, styles.NewListItem].join(\" \")}>\n                <Col xs=\"6\" sm=\"4\">\n                    <p className={styles.Title}>Number:</p>\n                    <p className={styles.Body}>{props.number}</p>\n                </Col>\n                <Col xs=\"6\" sm=\"4\">\n                    <p className={styles.Title}>Name:</p>\n                    <p className={styles.Body}>{props.name}</p>\n                </Col>\n                <Col xs=\"6\" sm=\"4\">\n                    <p className={styles.Title}>Id:</p>\n                    <p className={styles.Body}>{props.id}</p>\n                </Col>\n            </Row>\n    );\n}\n\nexport default React.memo(person);","import React, { Component } from 'react';\n\nimport Person from './Person/Person';\nimport { Container } from 'reactstrap';\n\nconst locationOf = (array, value) =>{\n    if (array.length === 0){\n        return 0;\n    }\n    let low = 0,\n        high = array.length;\n    while (low < high) {\n        let mid = (low + high) >>> 1;\n        if (array[mid][\"number\"] > value) low = mid + 1;\n        else high = mid;\n    }\n    return low;\n}\n\nclass people extends Component {\n\n    state = {\n        people: [],\n        endpoint: 'ws://localhost:7770'\n    }\n\n    componentDidMount(){\n        this.socket = new WebSocket(this.state.endpoint);\n        this.socket.onopen = () => {\n            this.socket.send('init');\n        }\n        this.socket.onmessage = e => {\n            var message = null;\n            try {\n                message = JSON.parse(e.data);\n            } catch(e) {\n                console.log('malformed message');\n            }\n            if (message) {\n                const people = [...this.state.people];\n                const location = locationOf(people, message.value);\n                if(!people[location] || people[location][\"number\"]!== message.value){\n                    people.splice(location, 0, {id: message.id, name: message.name, number: message.value});\n                }else if(people[location][\"number\"]=== message.value){\n                    people.splice(location, 1, {id: message.id, name: message.name, number: message.value});\n                }\n                this.setState({people:people});\n            }\n        } \n    }\n\n    componentWillUnmount(){\n        this.socket.close();\n    }\n\n    shouldComponentUpdate(nextProps, nextState){\n        return nextState.people !== this.state.people;\n    }\n\n    render(){\n        // console.log(\"In the render:\", this.state.people);\n        return (\n            <Container>{\n                this.state.people.map( person => {\n                    return <Person\n                        key = {person.number}\n                        number = {person.number}\n                        name = {person.name}\n                        id = {person.id}/>\n                })\n            }</Container>\n        )\n    }\n}\n\nexport default people;","import React from 'react';\nimport { Jumbotron, Button } from 'reactstrap';\n\nconst topbar = (props) => {\n    let buttonTitle = \"Connect To Websocket\";\n    let buttonColor = \"success\";\n    if (props.buttonState === true){\n        buttonTitle = \"Disconnect From Websocket\";\n        buttonColor = \"warning\";\n    }\n\n    return (\n        <Jumbotron>\n            <h1 className=\"display-3\">{props.title}</h1>\n            <Button color= {buttonColor}\n                onClick={props.clicked}>{buttonTitle}</Button>\n        </Jumbotron>\n    );\n};\n\nexport default topbar;","import React, { Component } from 'react';\nimport './App.css';\nimport People from '../components/People/People';\nimport Topbar from '../components/Topbar/Topbar';\n\nclass App extends Component {\n    state = {\n        showPeople: false,\n    }\n\n    webSocketStreamToggle = () => {\n        const doesShow = this.state.showPeople;\n        this.setState({ showPeople: !doesShow});\n    }\n    \n    shouldComponentUpdate(nextProps, nextState){\n        return nextState.showPeople !== this.state.showPeople;\n    }\n\n    render() {\n        let people = null\n        if (this.state.showPeople) {\n            people = <People />\n        }\n\n        return (\n            <div className=\"App\">\n                <Topbar\n                    title = \"Dominic Scotto Homework\"\n                    buttonState = {this.state.showPeople}\n                    clicked = {this.webSocketStreamToggle} />\n                {people}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__1Q6ql\",\"NewListItem\":\"Person_NewListItem__1dPCD\",\"change\":\"Person_change__1VWJG\",\"Title\":\"Person_Title__1YNQ8\",\"Body\":\"Person_Body__kagT_\"};"],"sourceRoot":""}